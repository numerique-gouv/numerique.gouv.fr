version: 2
jobs:
  build:
    docker:
      - image: cimg/ruby:3.1.2-browsers
    working_directory: ~/repo
    steps:
#      - restore_cache:
#          name: Restore Git Cache
#          keys:
#            - source-v5-{{ .Branch }}-{{ .Revision }}
#            - source-v5-{{ .Branch }}-
#            - source-v5-

      - checkout

      - save_cache:
          name: Save Git Cache
          key: source-v5-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      # Restore bundle cache
#      - restore_cache:
#          name: Restore Gem Cache
#          keys:
#            - gem-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
#            - gem-cache-v2-{{ arch }}-{{ .Branch }}
#            - gem-cache-v2

      - run:
          name: Bundle Install
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3

      # Store bundle cache
      - save_cache:
          name: Save Gem Cache
          key: gem-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: change yarn cache config
          command: yarn config set cache-folder ~/.repo/yarn-cache

#      - restore_cache:
#          name: Restore Yarn Package Cache
#          keys:
#            - yarn-packages-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - yarn-packages-v2-{{ .Branch }}-
#            - yarn-packages-v2-
#      - restore_cache:
#          name: Restore Node module cache
#          keys:
#            # when lock file changes, use increasingly general patterns to restore cache
#            - node-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - node-v2-{{ .Branch }}-
#            - node-v2-
      - run:
          name: Install Dependencies
          command: sudo apt-get update && sudo apt-get install -y python2 && yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.repo/yarn-cache
      - save_cache:
          name: Save Node module cache
          paths:
            - project/node_modules  # location depends on npm version
          key: node-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}

      - run:
          name: Yarn build
          command: |
            if [ "${CIRCLE_BRANCH}" == "production" ]; then
              yarn build-prod
            elif [ "${CIRCLE_BRANCH}" == "preproduction" ]; then
              yarn build-preprod
            else
              yarn build-dev
            fi

      - persist_to_workspace:
          root: ~/repo
          paths:
            - _site/*

  test-html:
    docker:
        - image: etbe/html5validator:1.0
    steps:
      - attach_workspace:
          at: tmp/workspace
      - run:
          name: validate html
          command: html5validator --root tmp/workspace/_site/

  deploy:
    docker:
      - image: cimg/ruby:3.1.2-browsers
    working_directory: ~/repo
    environment:
      - HOST_PRODUCTION: numerique.gouv.fr
      - HOST_PREPRODUCTION: preprod.numerique.gouv.fr
      - HOST_DEVELOPMENT: dev.numerique.gouv.fr
      - LOGIN: root
    steps:
      - attach_workspace:
          at: tmp/workspace

      - add_ssh_keys:
          fingerprints:
            - "31:8a:07:d1:56:88:18:c4:4e:91:5f:13:0c:58:b6:cc"
      - run: mkdir ~/.ssh
      - run:
          name: add keys
          command: echo $REMOTE_DEV_HOSTKEY >> ~/.ssh/known_hosts && echo $REMOTE_PREPROD_HOSTKEY >> ~/.ssh/known_hosts && echo $REMOTE_PROD_HOSTKEY >> ~/.ssh/known_hosts
      - run: sudo apt-get update && sudo apt-get install rsync
      - deploy:
          name: Deploy on OVH
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "La branche master n'aboutie pas à un déploiement"
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              rsync -avc --delete tmp/workspace/_site/ $LOGIN@$HOST_DEVELOPMENT:/var/www/html/
            elif [ "${CIRCLE_BRANCH}" == "preproduction" ]; then
              rsync -avc --delete tmp/workspace/_site/ $LOGIN@$HOST_PREPRODUCTION:/var/www/html/
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
              rsync -avc --delete tmp/workspace/_site/ $LOGIN@$HOST_PRODUCTION:/var/www/html/
            else
              echo "Not deploy branch, dry run only"
            fi

  test-js:
    docker:
      - image: cimg/ruby:3.1.2-browsers
    steps:
      - restore_cache:
          name: Restore Git Cache
          keys:
            - source-v5-{{ .Branch }}-{{ .Revision }}
            - source-v5-{{ .Branch }}-
            - source-v5-

      - checkout

#      - restore_cache:
#          name: Restore Yarn Package Cache
#          keys:
#            - yarn-packages-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - yarn-packages-v2-{{ .Branch }}-
#            - yarn-packages-v2-
#
#      - restore_cache:
#          name: Restore Node module cache
#          keys:
#            # when lock file changes, use increasingly general patterns to restore cache
#            - node-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - node-v2-{{ .Branch }}-
#            - node-v2-

      - run: sudo apt-get update && sudo apt-get install -y python2 && yarn install

      - run: mkdir ~/junit

      - run:
          command: yarn test --reporter mocha-junit-reporter --reporter-options mochaFile=~/junit/test-results.xml
          when: always

      - store_test_results:
          path: ~/junit

      - store_artifacts:
          path: ~/junit

  index:
    docker:
      - image: cimg/ruby:3.1.2-browsers
    steps:
#      - restore_cache:
#          name: Restore Git Cache
#          keys:
#            - source-v5-{{ .Branch }}-{{ .Revision }}
#            - source-v5-{{ .Branch }}-
#            - source-v5-

      - checkout

      - save_cache:
          name: Save Git Cache
          key: source-v5-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      # Restore bundle cache
#      - restore_cache:
#          name: Restore Gem Cache
#          keys:
#            - gem-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
#            - gem-cache-v2-{{ arch }}-{{ .Branch }}
#            - gem-cache-v2

      - run:
          name: Bundle Install
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3

      # Store bundle cache
      - save_cache:
          name: Save Gem Cache
          key: gem-cache-v2-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: change yarn cache config
          command: yarn config set cache-folder ~/.repo/yarn-cache

#      - restore_cache:
#          name: Restore Yarn Package Cache
#          keys:
#            - yarn-packages-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - yarn-packages-v2-{{ .Branch }}-
#            - yarn-packages-v2-
#      - restore_cache:
#          name: Restore Node module cache
#          keys:
#            # when lock file changes, use increasingly general patterns to restore cache
#            - node-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
#            - node-v2-{{ .Branch }}-
#            - node-v2-
      - run:
          name: Install Dependencies
          command: sudo apt-get update && sudo apt-get install -y python2 && yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.repo/yarn-cache
      - save_cache:
          name: Save Node module cache
          paths:
            - project/node_modules  # location depends on npm version
          key: node-v2-{{ .Branch }}-{{ checksum "yarn.lock" }}

      - run:
          name: Yarn index
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "La branche master n'aboutie pas à une indéxation"
            elif [ "${CIRCLE_BRANCH}" == "development" ]; then
              yarn index-dev
            elif [ "${CIRCLE_BRANCH}" == "preproduction" ]; then
              yarn index-preprod
            elif [ "${CIRCLE_BRANCH}" == "production" ]; then
              yarn index-prod
            else
              echo "Not deploy branch, dry run only"
            fi

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
#      - test-html:
#          requires:
#            - build
#          filters:
#            branches:
#              ignore:
#                - preproduction
      - test-js:
          requires:
            - build
          filters:
            branches:
              ignore:
                - preproduction
      - deploy:
          requires:
            - test-js
            - build

      - index:
          requires:
            - test-js
            - build


